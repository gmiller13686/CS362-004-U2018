        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <math.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11://Random test generator for Smithy card
        1:   12:int main() {
        -:   13:
        -:   14:int index;
        1:   15:int inputError = 0;
        1:   16:int handcountError = 0;
        1:   17:int discardcountError = 0;
        1:   18:int successfulTest = 0;
        -:   19:
        -:   20://Seed the random number generator
        1:   21:srand(time(NULL));
        -:   22:
        -:   23://Begin randomizing and testing
     2001:   24:for(index = 0; index < 2000; index++) {
        -:   25:    int currentPlayer;
        -:   26:    int i;
        -:   27:    int handPos;
        -:   28:    int result;
        -:   29:    int expectedHandcount;
        -:   30:    int expectedDiscardcount;
        -:   31:    struct gameState state;
        -:   32:    struct gameState* pointState;
        -:   33:
        -:   34:    //Set random person's turn (Range 0-3)
     2000:   35:    state.whoseTurn = rand() % 4; 
     2000:   36:    currentPlayer = state.whoseTurn;
        -:   37:
        -:   38:    //Set player's number of actions randomly (Range 0-9) and the expected number of actions after card is played
     2000:   39:    state.numActions = rand() % 10; 
        -:   40:
        -:   41:    //Set player's played card count (Range 0-20)
     2000:   42:    state.playedCardCount = rand() % 21;
        -:   43:
        -:   44:    //Set player's deck count (Range 0-20)
     2000:   45:    state.deckCount[currentPlayer] = rand() % 21;
        -:   46:
        -:   47:    //Set player's discard count (Range 0-20)
     2000:   48:    state.discardCount[currentPlayer] = rand() % 21;
        -:   49:
        -:   50:    //Assign cards to the discard pile
    21976:   51:    for(i = 0; i < state.discardCount[currentPlayer]; i++) {
    19976:   52:        state.discard[currentPlayer][i] = rand() % 27;
        -:   53:    }
        -:   54:
        -:   55:    //Set player's hand count (Range 1-10) and the expectedHandcount after card is played
     2000:   56:    state.handCount[currentPlayer] = (rand() % 10) + 1;
     2000:   57:    expectedHandcount = state.handCount[currentPlayer] + 2;    
        -:   58:
        -:   59:    //Set cards in player's hand (Range 0-26)
    12952:   60:    for(i = 0; i < state.handCount[currentPlayer]; i++) {
    10952:   61:        state.hand[currentPlayer][i] = rand() % 27;
        -:   62:    }
        -:   63:
        -:   64:    //Set handPos of the card being played
     2000:   65:    handPos = rand() % state.handCount[currentPlayer];
        -:   66:
        -:   67:    //Set handPos index in player's hand to the card being played (Smithy Card is 13)
     2000:   68:    state.hand[currentPlayer][handPos] = 13;
        -:   69:
        -:   70:    //Set the expected discard count for after card is played
     2000:   71:    if (state.deckCount[currentPlayer] == 0) {
       95:   72:        expectedDiscardcount = 0;
        -:   73:    }
        -:   74:    else {
     1905:   75:        expectedDiscardcount = state.discardCount[currentPlayer];
        -:   76:    }
        -:   77:
        -:   78:    //Call the smithyCard function
     2000:   79:    result = -1;
     2000:   80:    pointState = &state;
     2000:   81:    result = smithyCard(pointState, handPos, currentPlayer);
        -:   82:    
        -:   83:    //Get results
     2000:   84:    if (result != 0) {
    #####:   85:        inputError++;
        -:   86:    }
     2000:   87:    else if(state.handCount[currentPlayer] != expectedHandcount) {
     1990:   88:        handcountError++;
        -:   89:    }
       10:   90:    else if(state.discardCount[currentPlayer] != expectedDiscardcount) {
        5:   91:        discardcountError++;
        -:   92:    }
        -:   93:    else {
        5:   94:        successfulTest++;
        -:   95:    }
        -:   96:}
        -:   97:    //Print results
        1:   98:    printf("Results for Smithy card test: \n");
        1:   99:    printf("Number of successful tests: %d\n", successfulTest);
        1:  100:    printf("Number of input errors: %d\n", inputError);
        1:  101:    printf("Number of handCount errors: %d\n", handcountError);
        1:  102:    printf("Number of discardCount errors: %d\n", discardcountError);
        -:  103:
        1:  104:    return 0;
        -:  105:}
