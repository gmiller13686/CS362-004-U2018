        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <math.h>
        -:    7:#include <time.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11://Random test generator for Village card
        1:   12:int main() {
        -:   13:
        -:   14:int index;
        1:   15:int inputError = 0;
        1:   16:int actionError = 0;
        1:   17:int handcountError = 0;
        1:   18:int discardcountError = 0;
        1:   19:int successfulTest = 0;
        -:   20:
        -:   21://Seed the random number generator
        1:   22:srand(time(NULL));
        -:   23:
        -:   24://Begin randomizing and testing
     2001:   25:for(index = 0; index < 2000; index++) {
        -:   26:    int currentPlayer;
        -:   27:    int i;
        -:   28:    int handPos;
        -:   29:    int result;
        -:   30:    int expectedActions;
        -:   31:    int expectedHandcount;
        -:   32:    int expectedDiscardcount;
        -:   33:    struct gameState state;
        -:   34:    struct gameState* pointState;
        -:   35:
        -:   36:    //Set random person's turn (Range 0-3)
     2000:   37:    state.whoseTurn = rand() % 4; 
     2000:   38:    currentPlayer = state.whoseTurn;
        -:   39:
        -:   40:    //Set player's number of actions randomly (Range 0-9) and the expected number of actions after card is played
     2000:   41:    state.numActions = rand() % 10;
     2000:   42:    expectedActions = state.numActions + 2;
        -:   43:
        -:   44:    //Set player's played card count (Range 0-20)
     2000:   45:    state.playedCardCount = rand() % 21;
        -:   46:
        -:   47:    //Set player's deck count (Range 0-20)
     2000:   48:    state.deckCount[currentPlayer] = rand() % 21;
        -:   49:
        -:   50:    //Set player's discard count (Range 0-20)
     2000:   51:    state.discardCount[currentPlayer] = rand() % 21;
        -:   52:
        -:   53:    //Assign cards to the discard pile
    22275:   54:    for(i = 0; i < state.discardCount[currentPlayer]; i++) {
    20275:   55:        state.discard[currentPlayer][i] = rand() % 27;
        -:   56:    }
        -:   57:
        -:   58:    //Set player's hand count (Range 1-10) and the expectedHandcount after card is played
     2000:   59:    state.handCount[currentPlayer] = (rand() % 10) + 1;
     2000:   60:    expectedHandcount = state.handCount[currentPlayer];    
        -:   61:
        -:   62:    //Set cards in player's hand (Range 0-26)
    12979:   63:    for(i = 0; i < state.handCount[currentPlayer]; i++) {
    10979:   64:        state.hand[currentPlayer][i] = rand() % 27;
        -:   65:    }
        -:   66:
        -:   67:    //Set handPos of the card being played
     2000:   68:    handPos = rand() % state.handCount[currentPlayer];
        -:   69:
        -:   70:    //Set handPos index in player's hand to the card being played (Village Card is 14)
     2000:   71:    state.hand[currentPlayer][handPos] = 14;
        -:   72:
        -:   73:    //Set the expected discard count for after card is played
     2000:   74:    if (state.deckCount[currentPlayer] == 0) {
       95:   75:        expectedDiscardcount = 0;
        -:   76:    }
        -:   77:    else {
     1905:   78:        expectedDiscardcount = state.discardCount[currentPlayer];
        -:   79:    }
        -:   80:
        -:   81:    //Call the villageCard function
     2000:   82:    result = -1;
     2000:   83:    pointState = &state;
     2000:   84:    result = villageCard(pointState, handPos, currentPlayer);
        -:   85:    
        -:   86:    //Get results
     2000:   87:    if (result != 0) {
    #####:   88:        inputError++;
        -:   89:    }
     2000:   90:    else if(state.handCount[currentPlayer] != expectedHandcount) {
        3:   91:        handcountError++;
        -:   92:    }
     1997:   93:    else if(state.discardCount[currentPlayer] != expectedDiscardcount) {
    #####:   94:        discardcountError++;
        -:   95:    }
     1997:   96:    else if(state.numActions != expectedActions) {
     1997:   97:        actionError++;
        -:   98:    }
        -:   99:    else {
    #####:  100:        successfulTest++;
        -:  101:    }
        -:  102:}
        -:  103:    //Print results
        1:  104:    printf("Results for Village card test: \n");
        1:  105:    printf("Number of successful tests: %d\n", successfulTest);
        1:  106:    printf("Number of input errors: %d\n", inputError);
        1:  107:    printf("Number of action errors: %d\n", actionError);
        1:  108:    printf("Number of handCount errors: %d\n", handcountError);
        1:  109:    printf("Number of discardCount errors: %d\n", discardcountError);
        -:  110:
        1:  111:    return 0;
        -:  112:}
